
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://vcvlzfshobiagunbnucg.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZjdmx6ZnNob2JpYWd1bmJudWNnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDcyMjUzMjYsImV4cCI6MjA2MjgwMTMyNn0.3I0Ru9Qglk_XVpgK9hrghuVYq9OpP4oaJaGQQ721QIU";

// Incluir o service_role key para operações administrativas
// Este é um workaround para podermos usar as funções administrativas no cliente
// Em um ambiente de produção, isso deveria ser feito através de funções edge do Supabase
const SUPABASE_SERVICE_ROLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZjdmx6ZnNob2JpYWd1bmJudWNnIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0NzIyNTMyNiwiZXhwIjoyMDYyODAxMzI2fQ.Y6yLzxUUams9Djl7yQ9bAhYnz4fOfkq8lYkddYiaLSE";

// Cliente padrão com a chave anônima
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true
  }
});

// Cliente administrativo com a service role key
// IMPORTANTE: Este cliente deve ser usado apenas para operações específicas que precisem de direitos administrativos
export const adminSupabase = createClient<Database>(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

// Definir o tipo para as funções administrativas que queremos disponibilizar
// Isso resolve o erro de tipo usando uma extensão de interface
declare module '@supabase/supabase-js' {
  interface SupabaseClient {
    // Estamos adicionando uma propriedade customizada 'adminFunctions' em vez de modificar a propriedade 'admin' existente
    adminFunctions: {
      createUser: (options: any) => Promise<any>;
      getUserById: (id: string) => Promise<any>;
      listUsers: () => Promise<any>;
    }
  }
}

// Adicionar as funções administrativas como uma propriedade separada da interface
// em vez de sobrescrever o objeto auth.admin
supabase.adminFunctions = {
  createUser: async (options: any) => {
    return await adminSupabase.auth.admin.createUser(options);
  },
  getUserById: async (id: string) => {
    return await adminSupabase.auth.admin.getUserById(id);
  },
  listUsers: async () => {
    return await adminSupabase.auth.admin.listUsers();
  }
};
